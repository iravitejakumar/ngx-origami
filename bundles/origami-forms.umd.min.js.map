{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-origami/forms/src/value-accessor.ts","ng://ngx-origami/forms/src/forms.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","ORIGAMI_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","OrigamiControlValueAccessor","multi","elementRef","injector","renderer","compositionMode","_this","_super","call","this","validationErrorsKey","isWritingValue","ignoreInvalidChanges","__","constructor","prototype","create","__extends","_control","get","NgControl","control","ngAfterViewInit","element","nativeElement","isValidatable","control_1","statusSub","statusChanges","subscribe","isInvalid","invalid","dirty","shouldUseValidate","setValidators","Validators","compose","validator","validate","_a","ngOnDestroy","unsubscribe","writeValue","value","isMultiSelectable","isSelectable","property","getSelectableProperty","isCheckedElement","checked","Boolean","onChangedEvent","event","changed","type","onChange","onInvalidChanged","updateValueAndValidity","isPropertyDefined","wasInvalid","expected","validateMutatesInvalid","isMulti","valueProp","indexProp","useSelectableValueProp","hasValueProp","hasIndexProp","previousValue","error","itemValuePath","ElementRef","Injector","Renderer2","Optional","Inject","args","COMPOSITION_BUFFER_MODE","Input","HostListener","Directive","selector","providers","DefaultValueAccessor","OrigamiFormsModule","NgModule","declarations","exports"],"mappings":";;;;;;;;;;;;;;oFAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAgCrB,SAASO,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2HZ,EAAvHa,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIH,EAAkB,OAATE,EAAgBA,EAAOV,OAAOe,yBAAyBP,EAAQC,GAAOC,EACrH,GAAuB,iBAAZM,SAAoD,mBAArBA,QAAQC,SAAyBH,EAAIE,QAAQC,SAASV,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIQ,EAAIX,EAAWM,OAAS,EAAGK,GAAK,EAAGA,KAASpB,EAAIS,EAAWW,MAAIJ,GAAKH,EAAI,EAAIb,EAAEgB,GAAKH,EAAI,EAAIb,EAAEU,EAAQC,EAAKK,GAAKhB,EAAEU,EAAQC,KAASK,GAChJ,OAAOH,EAAI,GAAKG,GAAKd,OAAOmB,eAAeX,EAAQC,EAAKK,GAAIA,EAGzD,SAASM,EAAQC,EAAYC,GAChC,OAAO,SAAUd,EAAQC,GAAOa,EAAUd,EAAQC,EAAKY,QCD9CE,EAA2C,CACtDC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,iBA8GP,SAAAD,EACSE,EACGC,EACAC,EAGVC,GANF,IAAAC,EAQEC,EAAAC,KAAAC,KAAML,EAAUF,EAAYG,IAAgBI,YAPrCH,EAAAJ,WAAAA,EACGI,EAAAH,SAAAA,EACAG,EAAAF,SAAAA,EA3CZE,EAAAI,oBAAsB,WAsBdJ,EAAAK,gBAAiB,EAMjBL,EAAAM,sBAAuB,IAuTjC,ODhcO,SAAmB1C,EAAGC,GAEzB,SAAS0C,IAAOJ,KAAKK,YAAc5C,EADnCD,EAAcC,EAAGC,GAEjBD,EAAE6C,UAAkB,OAAN5C,EAAaC,OAAO4C,OAAO7C,IAAM0C,EAAGE,UAAY5C,EAAE4C,UAAW,IAAIF,GCyFlCI,CAAAjB,EAAAO,GAsB/CnC,OAAAmB,eAAIS,EAAAe,UAAA,UAAO,KAAX,WAKE,OAJKN,KAAKS,WACRT,KAAKS,SAAuBT,KAAKN,SAASgB,IAAIC,EAAAA,WAAYC,SAGrDZ,KAAKS,0CA6CdlB,EAAAe,UAAAO,gBAAA,WAAA,IAAAhB,EAAAG,KACQc,EAAUd,KAAKP,WAAWsB,cAChC,GAAIf,KAAKgB,cAAcF,GAAU,CAG/B,IAAMG,EAAUjB,KAAKY,QAErBZ,KAAKkB,UAAYD,EAAQE,cAAeC,WAAU,WAClB,mBAAnBvB,EAAKwB,UACdP,EAAQQ,QAAUzB,EAAKwB,UAAUJ,GAEjCH,EAAQQ,UAAYL,EAAQK,WAAaL,EAAQM,SAMjDvB,KAAKwB,kBAAkBV,IACzBG,EAAQQ,cACNC,EAAAA,WAAWC,QAAQ,CACjBV,EAAQW,UACR,iBACE,OAAId,EAAQe,WACH,OAEPC,EAAA,IAAUjC,EAAKI,sBAAsB,EAAI6B,SAYvDvC,EAAAe,UAAAyB,YAAA,WACM/B,KAAKkB,WACPlB,KAAKkB,UAAUc,eAUnBzC,EAAAe,UAAA2B,WAAA,SAAWC,GACTlC,KAAKE,gBAAiB,EACtB,IAAMY,EAAUd,KAAKP,WAAWsB,cAChC,GAAIf,KAAKmC,kBAAkBrB,IAAYd,KAAKoC,aAAatB,GAAU,CACjE,IAAMuB,EAAWrC,KAAKsC,sBAAsBxB,EAASoB,GACjDG,IACIvB,EAASuB,GAAYH,QAEpBlC,KAAKuC,iBAAiBzB,GAC/BA,EAAQ0B,QAAUC,QAAQP,GAE1BpC,EAAAQ,UAAM2B,WAAUlC,KAAAC,KAACkC,GAGnBlC,KAAKE,gBAAiB,GAcxBX,EAAAe,UAAAoC,eAAA,SAAeC,GACb,IAAK3C,KAAKE,eAAgB,CACxB,IAAMY,EAAUd,KAAKP,WAAWsB,cAC5B6B,GAAU,EACd,OAAQD,EAAME,MACZ,IAAK,yBACL,IAAK,wBAEHD,EAAuB,mBADjBP,EAAWrC,KAAKsC,sBAAsBxB,KACW,iBAAbuB,EAC1C,MAEF,IAAK,0BACL,IAAK,mBAEHO,EAAuB,oBADjBP,EAAWrC,KAAKsC,sBAAsBxB,KACY,aAAbuB,EAC3C,MAEF,QACEO,GAAU,EAGd,GAAIA,EAAS,CACX,IAAIP,OAAQ,EAIVA,EAHErC,KAAKmC,kBAAkBrB,IAAYd,KAAKoC,aAAatB,GAG5Cd,KAAKsC,sBAAsBxB,GAC7Bd,KAAKuC,iBAAiBzB,GACpB,UAEA,QAMbd,KAAK8C,SAAShC,EAAQuB,OAiB5B9C,EAAAe,UAAAyC,iBAAA,WACE,IAAK/C,KAAKG,qBAAsB,CAC9B,IAAMW,EAAUd,KAAKP,WAAWsB,cAE9Bf,KAAKgB,cAAcF,IACnBd,KAAKY,SACLZ,KAAKY,QAAQU,UAAYR,EAAQQ,UAEjCtB,KAAKG,sBAAuB,EAC5BH,KAAKY,QAAQoC,yBACbhD,KAAKG,sBAAuB,KAUlCZ,EAAAe,UAAAiC,iBAAA,SAAiBzB,GACf,OAAOd,KAAKiD,kBAAkBnC,EAAS,YAQzCvB,EAAAe,UAAA8B,aAAA,SAAatB,GACX,OACEd,KAAKiD,kBAAkBnC,EAAS,aAChCd,KAAKiD,kBAAkBnC,EAAS,iBASpCvB,EAAAe,UAAA6B,kBAAA,SAAkBrB,GAChB,SACEA,IACCd,KAAKiD,kBAAkBnC,EAAS,oBAC/Bd,KAAKiD,kBAAkBnC,EAAS,qBAE3Bd,KAAKoC,aAAatB,KAA6B,IAAlBA,EAAQtB,QAWhDD,EAAAe,UAAAU,cAAA,SAAcF,GACZ,OAAOd,KAAKiD,kBAAkBnC,EAAS,YAGzCvB,EAAAe,UAAAkB,kBAAA,SAAkBV,GAChB,GAAgC,mBAArBA,EAAQe,SAAyB,CAS1C7B,KAAKG,sBAAuB,EAC5B,IAAM+C,EAAapC,EAAQQ,QAG3BR,EAAQe,WAIR,IAAMsB,EAAWrC,EAAQQ,QACzBR,EAAQQ,SAAWR,EAAQQ,QAC3BR,EAAQe,WACR,IAAMuB,EAAyBtC,EAAQQ,UAAY6B,EAGnD,OAFArC,EAAQQ,QAAU4B,EAClBlD,KAAKG,sBAAuB,EACrBiD,EAEP,OAAO,GAWH7D,EAAAe,UAAA2C,kBAAR,SAA0BnC,EAAcuB,GACtC,QAASvB,GAAWuB,KAAYvB,GAa1BvB,EAAAe,UAAAgC,sBAAR,SAA8BxB,EAAcoB,GAC1C,IAAMmB,EAAUrD,KAAKmC,kBAAkBrB,GACjCwC,EAAYD,EAAU,gBAAkB,eACxCE,EAAYF,EAAU,iBAAmB,WAC/C,GAA2C,kBAAhCrD,KAAKwD,uBAAsC,CAGpD,IAAMC,EAAeH,KAAaxC,EAC5B4C,EAAeH,KAAazC,EAClC,GAAI2C,IAAiBC,EACnB1D,KAAKwD,wBAAyB,OACzB,IAAKC,GAAgBC,EAC1B1D,KAAKwD,wBAAyB,MACzB,CAAA,GAAI,MAAOtB,EAehB,OAdA,IAAMyB,EAAgB7C,EAAQwC,GAG9B,IACExC,EAAQwC,GAAapB,EACrB,MAAO0B,IAMT5D,KAAKwD,uBAAyB1C,EAAQwC,KAAepB,EACrDpB,EAAQwC,GAAaK,GAMzB,OAAI7C,EAAQ+C,cAIH,QAEA7D,KAAKwD,uBAAyBF,EAAYC,4CAvShCO,EAAAA,kBACCC,EAAAA,gBACAC,EAAAA,2CACnBC,EAAAA,UAAQ,CAAApB,KACRqB,EAAAA,OAAMC,KAAA,CAACC,EAAAA,8BAtDVnG,EAAA,CADCoG,EAAAA,yCAUDpG,EAAA,CADCoG,EAAAA,mDAqIDpG,EAAA,CANCqG,EAAAA,aAAa,yBAA0B,CAAC,WACxCA,EAAAA,aAAa,wBAAyB,CAAC,WACvCA,EAAAA,aAAa,0BAA2B,CAAC,WACzCA,EAAAA,aAAa,mBAAoB,CAAC,WAClCA,EAAAA,aAAa,kBAAmB,CAAC,WACjCA,EAAAA,aAAa,gBAAiB,CAAC,+CAsDhCrG,EAAA,CADCqG,EAAAA,aAAa,yDAzMH/E,EAA2BtB,EAAA,CALvCsG,EAAAA,UAAU,CACTC,SACE,uEACFC,UAAW,CAACvF,KA+DTH,EAAA,EAAAkF,EAAAA,YACAlF,EAAA,EAAAmF,EAAAA,OAAOE,EAAAA,2BA9DC7E,IAAoCmF,EAAAA,mCCxGjD,SAAAC,KAAiC,OAApBA,EAAkB1G,EAAA,CAJ9B2G,EAAAA,SAAS,CACRC,aAAc,CAACtF,GACfuF,QAAS,CAACvF,MAECoF","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  Optional,\n  Provider,\n  Renderer2,\n  forwardRef\n} from '@angular/core';\nimport {\n  COMPOSITION_BUFFER_MODE,\n  DefaultValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n  Validators,\n  AbstractControl\n} from '@angular/forms';\n\n/**\n * An interface for determining if an element is a checkbox.\n */\nexport interface CheckedElementLike {\n  checked?: boolean;\n}\n\n/**\n * An interface for determining if an element is selectable.\n */\nexport interface SelectableLike {\n  multi?: boolean;\n  selected?: string | number;\n  selectedItem?: any;\n}\n\n/**\n * An interface for determining if an element is multi selectable.\n */\nexport interface MultiSelectableLike {\n  multi?: boolean;\n  selectedValues?: Array<string | number>;\n  selectedItems?: any[];\n}\n\n/**\n * An interface for determining if an element is validatable.\n */\nexport interface ValidatableLike {\n  invalid?: boolean;\n  validate?(): void;\n}\n\n/**\n * OrigamiControlValueAccessor provider.\n */\nexport const ORIGAMI_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => OrigamiControlValueAccessor),\n  multi: true\n};\n\n/**\n * A value accessor for `ngModel`, `formControl`, and `formControlName`, on\n * custom elements. In addition to one of the above directives, `origami`\n * should be added to the element to denote that this value accessor should\n * control it.\n *\n * Example: `<paper-input [(ngModel)]=\"value\" origami></paper-input>`\n *\n * The connected element should implement one of the below\n * properties:\n *\n * - `checked` as a boolean for checkbox-like elements.\n * - `selected` for single selectable elements. It must be an index or string\n *   name attribute.\n * - `selectedItem` for single selectable elements. It may be any type.\n * - `selectedValues` for multi selectable elements. It must be an array of\n *   indices or string name attributes.\n * - `selectedItems` for multi selectable elements. It must be an array of any\n *   type.\n * - `value` for any basic form element. It may be any type.\n *\n * For selectable and multi selectable elements, the attribute `useKey` should\n * be specified if the control bindings an index or name value to the element\n * instead of an object.\n *\n * Additionally, an element may implement one or more of the following\n * properties:\n *\n * - `disabled` as a boolean\n * - `invalid` as a boolean to indicate validity\n * - `validate()` as a function to run custom validation\n *\n * To listen for changes to these events, an element should implement one or\n * more of the following events to notify Angular of any updates.\n *\n * - `input` - will update any of the above properties\n * - `blur`\n * - `checked-changed`\n * - `selected-changed`\n * - `selected-item-changed`\n * - `selected-values-changed`\n * - `selected-items-changed`\n * - `value-changed`\n * - `invalid-changed`\n */\n@Directive({\n  selector:\n    '[ngModel][origami],[formControlName][origami],[formControl][origami]',\n  providers: [ORIGAMI_CONTROL_VALUE_ACCESSOR]\n})\nexport class OrigamiControlValueAccessor extends DefaultValueAccessor\n  implements AfterViewInit, OnDestroy {\n  /**\n   * Overrides the logic to determine what to set an element's `invalid`\n   * property to given the provided `AbstractControl`. The default is to set the\n   * element as `invalid` whenever the control is both invalid and dirty.\n   */\n  @Input()\n  isInvalid?: (control: AbstractControl) => boolean;\n  /**\n   * The key to use when reporting that an element's `validate()` function\n   * returns false. When this happens, the control's `errors` object will be\n   * set with this key and a value of true.\n   *\n   * The default key is \"validate\".\n   */\n  @Input()\n  validationErrorsKey = 'validate';\n\n  /**\n   * The `AbstractControl` attached to this element.\n   */\n  get control(): AbstractControl | undefined {\n    if (!this._control) {\n      this._control = (<NgControl>this.injector.get(NgControl)).control!;\n    }\n\n    return this._control;\n  }\n\n  /**\n   * Subscription to the NgControl's statusChanges.\n   */\n  protected statusSub?: { unsubscribe(): void };\n  /**\n   * Most custom elements property will emit a `property-changed` event when\n   * their value is set. This flag informs the value accessor to ignore the\n   * next event while it is in the middle of writing a value.\n   */\n  private isWritingValue = false;\n  /**\n   * Flag that informs the value accessor that it is currently updating an\n   * element and should ignore additional `invalid` property changes until it is\n   * complete.\n   */\n  private ignoreInvalidChanges = false;\n  /**\n   * Indicates whether or not to use the value property or index property for a\n   * select or mulit-select element. When undefined, it indicates that the\n   * determination of which property to use has not occurred yet.\n   */\n  private useSelectableValueProp?: boolean;\n  /**\n   * Cached `control` value.\n   */\n  private _control: AbstractControl | undefined;\n\n  constructor(\n    public elementRef: ElementRef,\n    protected injector: Injector,\n    protected renderer: Renderer2,\n    @Optional()\n    @Inject(COMPOSITION_BUFFER_MODE)\n    compositionMode: boolean\n  ) {\n    super(renderer, elementRef, compositionMode);\n  }\n\n  /**\n   * Lifecycle callback that will connect an element's validatable properties\n   * (if they are implemented) to the Angular control.\n   */\n  ngAfterViewInit() {\n    const element = this.elementRef.nativeElement;\n    if (this.isValidatable(element)) {\n      // The control will always be set by ngAfterViewInit due to the nature of\n      // the directive's selectors\n      const control = this.control!;\n      // Allows Angular validators to update the custom element's validity\n      this.statusSub = control.statusChanges!.subscribe(() => {\n        if (typeof this.isInvalid === 'function') {\n          element.invalid = this.isInvalid(control);\n        } else {\n          element.invalid = !!control.invalid && !!control.dirty;\n        }\n      });\n\n      // Allows custom element validate function to update Angular control's\n      // validity\n      if (this.shouldUseValidate(element)) {\n        control.setValidators(\n          Validators.compose([\n            control.validator,\n            () => {\n              if (element.validate()) {\n                return null;\n              } else {\n                return { [this.validationErrorsKey]: true };\n              }\n            }\n          ])\n        );\n      }\n    }\n  }\n\n  /**\n   * Lifecycle callback to clean up subscriptions.\n   */\n  ngOnDestroy() {\n    if (this.statusSub) {\n      this.statusSub.unsubscribe();\n    }\n  }\n\n  /**\n   * Writes a value to a custom element's correct value property, based on what\n   * kind of element the directive controls.\n   *\n   * @param value the value to write\n   */\n  writeValue(value: any) {\n    this.isWritingValue = true;\n    const element = this.elementRef.nativeElement;\n    if (this.isMultiSelectable(element) || this.isSelectable(element)) {\n      const property = this.getSelectableProperty(element, value);\n      if (property) {\n        (<any>element)[property] = value;\n      }\n    } else if (this.isCheckedElement(element)) {\n      element.checked = Boolean(value);\n    } else {\n      super.writeValue(value);\n    }\n\n    this.isWritingValue = false;\n  }\n\n  /**\n   * Listen for custom element events and notify Angular of any changes.\n   *\n   * @param event the change event\n   */\n  @HostListener('selected-items-changed', ['$event'])\n  @HostListener('selected-item-changed', ['$event'])\n  @HostListener('selected-values-changed', ['$event'])\n  @HostListener('selected-changed', ['$event'])\n  @HostListener('checked-changed', ['$event'])\n  @HostListener('value-changed', ['$event'])\n  onChangedEvent(event: Event) {\n    if (!this.isWritingValue) {\n      const element = this.elementRef.nativeElement;\n      let changed = false;\n      switch (event.type) {\n        case 'selected-items-changed':\n        case 'selected-item-changed': {\n          const property = this.getSelectableProperty(element);\n          changed = property === 'selectedItems' || property === 'selectedItem';\n          break;\n        }\n        case 'selected-values-changed':\n        case 'selected-changed': {\n          const property = this.getSelectableProperty(element);\n          changed = property === 'selectedValues' || property === 'selected';\n          break;\n        }\n        default:\n          changed = true;\n      }\n\n      if (changed) {\n        let property: string;\n        if (this.isMultiSelectable(element) || this.isSelectable(element)) {\n          // property will be defined if we reach this since changed can only\n          // be true if the property is defined for selectable elements\n          property = this.getSelectableProperty(element)!;\n        } else if (this.isCheckedElement(element)) {\n          property = 'checked';\n        } else {\n          property = 'value';\n        }\n\n        // Don't use `event.detail.value`, since we cannot assume that all\n        // change events will provide that. Additionally, some event details\n        // may be splices of an array or object instead of the current value.\n        this.onChange(element[property]);\n      }\n    }\n  }\n\n  /**\n   * Listen for `invalid` property changes. Some elements, such as\n   * `<vaadin-date-picker>` have multiple \"values\". Setting the primary value\n   * (ex. the date string) may result in a temporarily invalid element until\n   * subsequent values (ex. the selected date) have been updated.\n   *\n   * Since this value accessor only listens for value changes, it may not be\n   * notified of the change in validity. This listener will listen for any\n   * explicity validity changes from the element and re-evaluate a control's\n   * validity if it and the element's validity are out of sync.\n   */\n  @HostListener('invalid-changed')\n  onInvalidChanged() {\n    if (!this.ignoreInvalidChanges) {\n      const element = this.elementRef.nativeElement;\n      if (\n        this.isValidatable(element) &&\n        this.control &&\n        this.control.invalid !== element.invalid\n      ) {\n        this.ignoreInvalidChanges = true;\n        this.control.updateValueAndValidity();\n        this.ignoreInvalidChanges = false;\n      }\n    }\n  }\n\n  /**\n   * Determines whether or not an element is checkbox-like.\n   *\n   * @param element the element to check\n   */\n  isCheckedElement(element: any): element is CheckedElementLike {\n    return this.isPropertyDefined(element, 'checked');\n  }\n\n  /**\n   * Determines whether or not an element is selectable-like.\n   *\n   * @param element the element to check\n   */\n  isSelectable(element: any): element is SelectableLike {\n    return (\n      this.isPropertyDefined(element, 'selected') ||\n      this.isPropertyDefined(element, 'selectedItem')\n    );\n  }\n\n  /**\n   * Determines whether or not an element is multi selectable-like.\n   *\n   * @param element the element to check\n   */\n  isMultiSelectable(element: any): element is MultiSelectableLike {\n    if (\n      element &&\n      (this.isPropertyDefined(element, 'selectedValues') ||\n        this.isPropertyDefined(element, 'selectedItems'))\n    ) {\n      return this.isSelectable(element) ? element.multi === true : true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Determines whether or not an element is validatable-like.\n   *\n   * @param element the element to check\n   */\n  isValidatable(element: any): element is ValidatableLike {\n    return this.isPropertyDefined(element, 'invalid');\n  }\n\n  shouldUseValidate(element: any): element is { validate(): boolean } {\n    if (typeof element.validate === 'function') {\n      // Some element's (such as `<vaadin-text-field>`) may not actually mutate\n      // the `invalid` property when `validate()` is called. In these\n      // situations, it's possible for Angular to set an element as invalid and\n      // never be able to recover since the element's `validate()` will always\n      // report it is invalid.\n      //\n      // In these situations, Origami should ignore the element's validate()\n      // function.\n      this.ignoreInvalidChanges = true;\n      const wasInvalid = element.invalid;\n      // If the element does mutate `invalid`, ask it to do so first to get a\n      // baseline.\n      element.validate();\n      // When `validate()` is called next, we will know if the element mutates\n      // `invalid` if the expected value matches `invalid` after changing\n      // `invalid` to something else.\n      const expected = element.invalid;\n      element.invalid = !element.invalid;\n      element.validate();\n      const validateMutatesInvalid = element.invalid === expected;\n      element.invalid = wasInvalid;\n      this.ignoreInvalidChanges = false;\n      return validateMutatesInvalid;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Determines whether or not a property is defined anywhere in the provided\n   * element's prototype chain.\n   *\n   * @param element the element to check\n   * @param property the property to check for\n   */\n  private isPropertyDefined(element: any, property: string): boolean {\n    return !!element && property in element;\n  }\n\n  /**\n   * Retrieves the property name of the selectable or multi-selectable element\n   * that should be updated. This method will use defined properties and the\n   * value type to determine which property should be used. If it cannot\n   * determine which property to use, it will return undefined.\n   *\n   * @param element the element to get the property for\n   * @param value a value for the element's property\n   * @returns the property name, or undefined if it cannot be determined\n   */\n  private getSelectableProperty(element: any, value?: any): string | undefined {\n    const isMulti = this.isMultiSelectable(element);\n    const valueProp = isMulti ? 'selectedItems' : 'selectedItem';\n    const indexProp = isMulti ? 'selectedValues' : 'selected';\n    if (typeof this.useSelectableValueProp !== 'boolean') {\n      // Determine whether we should be setting the index or value property for\n      // a selectable element\n      const hasValueProp = valueProp in element;\n      const hasIndexProp = indexProp in element;\n      if (hasValueProp && !hasIndexProp) {\n        this.useSelectableValueProp = true;\n      } else if (!hasValueProp && hasIndexProp) {\n        this.useSelectableValueProp = false;\n      } else if (typeof value !== 'undefined' && value !== null) {\n        const previousValue = element[valueProp];\n        // When the element has both properties, try to set it to the value\n        // property first. If it fails, then use the index property\n        try {\n          element[valueProp] = value;\n        } catch (error) {\n          // Could throw if the value is an unexpected type\n        }\n\n        // Check to see if the value we set it to is still accurate. If it's\n        // not then the element silently rejected the new value.\n        this.useSelectableValueProp = element[valueProp] === value;\n        element[valueProp] = previousValue;\n      } else {\n        return undefined;\n      }\n    }\n\n    if (element.itemValuePath) {\n      // <vaadin-combo-box> will want to use selectedItem for object values.\n      // However, if `itemValuePath` is set then the control value is not the\n      // item itself, but the `value` property.\n      return 'value';\n    } else {\n      return this.useSelectableValueProp ? valueProp : indexProp;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OrigamiControlValueAccessor } from './value-accessor';\n\n/**\n * Provides support for template and reactive Angular form directives and\n * custom elements.\n */\n@NgModule({\n  declarations: [OrigamiControlValueAccessor],\n  exports: [OrigamiControlValueAccessor]\n})\nexport class OrigamiFormsModule {}\n"]}