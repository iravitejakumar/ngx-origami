/**
 * Regex to find and replace `:host-context()` selectors.
 */
export var HOST_CONTEXT_REGEX = /:host-context\((.*)\)/g;
/**
 * Regex to find and replace `:host` selectors.
 */
export var HOST_REGEX = /:host(?:\((.*)\))?/g;
// from @angular/platform-browser
export var COMPONENT_VARIABLE = '%COMP%';
export var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
export var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
/**
 * Converts the provided CSS string to an Angular emulated encapsulation string
 * for the given component id.
 *
 * @param style the CSS string to convert
 * @returns a CSS string that emulates encapsulation for the given component id
 */
export function styleToEmulatedEncapsulation(style) {
    var statements = parseStyleStatements(style);
    function addEmulation(statement) {
        if (Array.isArray(statement.statements)) {
            statement.statements.forEach(function (nested) { return addEmulation(nested); });
        }
        else {
            var selector = statement.selector;
            selector = selector.trim();
            selector = selector
                .split(',')
                .map(function (subSelector) {
                return subSelector
                    .trim()
                    .split(' ')
                    .map(function (part) {
                    part = part.trim();
                    if (part.includes(':host')) {
                        return part;
                    }
                    else {
                        return part + "[" + CONTENT_ATTR + "]";
                    }
                })
                    .join(' ');
            })
                .join(',');
            selector = selector.replace(HOST_CONTEXT_REGEX, "*$1 [" + HOST_ATTR + "]");
            selector = selector.replace(HOST_REGEX, "[" + HOST_ATTR + "]$1");
            statement.selector = selector;
        }
    }
    statements.forEach(function (statement) {
        addEmulation(statement);
    });
    return statementsToString(statements);
}
/**
 * Parses a CSS string into an array of statements.
 *
 * @param style the CSS string to parse
 * @returns an array of CSS statements
 */
export function parseStyleStatements(style) {
    var inAtRule = false;
    var inSingleQuote = false;
    var inDoubleQuote = false;
    var inBlock = 0;
    var leavingBlock = false;
    var statements = [];
    var currentStatement = {
        selector: '',
        block: ''
    };
    for (var i = 0; i < style.length; i++) {
        var char = style[i];
        switch (char) {
            case '@':
                inAtRule = true;
                break;
            case "'":
                inSingleQuote = !inSingleQuote;
                break;
            case '"':
                inDoubleQuote = !inDoubleQuote;
                break;
            case '{':
            case '}':
                if (!inSingleQuote && !inDoubleQuote) {
                    if (char == '{') {
                        inBlock++;
                    }
                    else {
                        inBlock--;
                        leavingBlock = inBlock === 0;
                    }
                }
                break;
        }
        if (inBlock) {
            currentStatement.block += char;
        }
        else if (leavingBlock) {
            currentStatement.block += char;
            if (inAtRule) {
                currentStatement.statements = parseStyleStatements(currentStatement.block.substring(currentStatement.block.indexOf('{') + 1, currentStatement.block.lastIndexOf('}')));
            }
            currentStatement.selector = currentStatement.selector.trim();
            currentStatement.block = currentStatement.block.trim();
            statements.push(currentStatement);
            currentStatement = { selector: '', block: '' };
            leavingBlock = false;
        }
        else {
            currentStatement.selector += char;
        }
    }
    return statements;
}
/**
 * Converts an array of statements back into a single CSS string.
 *
 * @param statements the statements to convert
 * @returns a CSS string
 */
export function statementsToString(statements) {
    return statements
        .map(function (statement) {
        var block = Array.isArray(statement.statements)
            ? "{" + statementsToString(statement.statements) + "}"
            : statement.block;
        return statement.selector + " " + block;
    })
        .join('\n');
}
//# sourceMappingURL=data:application/json;base64,