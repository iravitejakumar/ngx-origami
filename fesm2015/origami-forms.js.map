{"version":3,"file":"origami-forms.js","sources":["ng://@codebakery/origami/forms/src/value-accessor.ts","ng://@codebakery/origami/forms/src/forms.module.ts","ng://@codebakery/origami/forms/origami-forms.ts"],"sourcesContent":["import {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  HostListener,\n  Inject,\n  Injector,\n  Input,\n  OnDestroy,\n  Optional,\n  Provider,\n  Renderer2,\n  forwardRef\n} from '@angular/core';\nimport {\n  COMPOSITION_BUFFER_MODE,\n  DefaultValueAccessor,\n  NG_VALUE_ACCESSOR,\n  NgControl,\n  Validators,\n  AbstractControl\n} from '@angular/forms';\n\n/**\n * An interface for determining if an element is a checkbox.\n */\nexport interface CheckedElementLike {\n  checked?: boolean;\n}\n\n/**\n * An interface for determining if an element is selectable.\n */\nexport interface SelectableLike {\n  multi?: boolean;\n  selected?: string | number;\n  selectedItem?: any;\n}\n\n/**\n * An interface for determining if an element is multi selectable.\n */\nexport interface MultiSelectableLike {\n  multi?: boolean;\n  selectedValues?: Array<string | number>;\n  selectedItems?: any[];\n}\n\n/**\n * An interface for determining if an element is validatable.\n */\nexport interface ValidatableLike {\n  invalid?: boolean;\n  validate?(): void;\n}\n\n/**\n * OrigamiControlValueAccessor provider.\n */\nexport const ORIGAMI_CONTROL_VALUE_ACCESSOR: Provider = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => OrigamiControlValueAccessor),\n  multi: true\n};\n\n/**\n * A value accessor for `ngModel`, `formControl`, and `formControlName`, on\n * custom elements. In addition to one of the above directives, `origami`\n * should be added to the element to denote that this value accessor should\n * control it.\n *\n * Example: `<paper-input [(ngModel)]=\"value\" origami></paper-input>`\n *\n * The connected element should implement one of the below\n * properties:\n *\n * - `checked` as a boolean for checkbox-like elements.\n * - `selected` for single selectable elements. It must be an index or string\n *   name attribute.\n * - `selectedItem` for single selectable elements. It may be any type.\n * - `selectedValues` for multi selectable elements. It must be an array of\n *   indices or string name attributes.\n * - `selectedItems` for multi selectable elements. It must be an array of any\n *   type.\n * - `value` for any basic form element. It may be any type.\n *\n * For selectable and multi selectable elements, the attribute `useKey` should\n * be specified if the control bindings an index or name value to the element\n * instead of an object.\n *\n * Additionally, an element may implement one or more of the following\n * properties:\n *\n * - `disabled` as a boolean\n * - `invalid` as a boolean to indicate validity\n * - `validate()` as a function to run custom validation\n *\n * To listen for changes to these events, an element should implement one or\n * more of the following events to notify Angular of any updates.\n *\n * - `input` - will update any of the above properties\n * - `blur`\n * - `checked-changed`\n * - `selected-changed`\n * - `selected-item-changed`\n * - `selected-values-changed`\n * - `selected-items-changed`\n * - `value-changed`\n * - `invalid-changed`\n */\n@Directive({\n  selector:\n    '[ngModel][origami],[formControlName][origami],[formControl][origami]',\n  providers: [ORIGAMI_CONTROL_VALUE_ACCESSOR]\n})\nexport class OrigamiControlValueAccessor extends DefaultValueAccessor\n  implements AfterViewInit, OnDestroy {\n  /**\n   * Overrides the logic to determine what to set an element's `invalid`\n   * property to given the provided `AbstractControl`. The default is to set the\n   * element as `invalid` whenever the control is both invalid and dirty.\n   */\n  @Input()\n  isInvalid?: (control: AbstractControl) => boolean;\n  /**\n   * The key to use when reporting that an element's `validate()` function\n   * returns false. When this happens, the control's `errors` object will be\n   * set with this key and a value of true.\n   *\n   * The default key is \"validate\".\n   */\n  @Input()\n  validationErrorsKey = 'validate';\n\n  /**\n   * The `AbstractControl` attached to this element.\n   */\n  get control(): AbstractControl | undefined {\n    if (!this._control) {\n      this._control = (<NgControl>this.injector.get(NgControl)).control!;\n    }\n\n    return this._control;\n  }\n\n  /**\n   * Subscription to the NgControl's statusChanges.\n   */\n  protected statusSub?: { unsubscribe(): void };\n  /**\n   * Most custom elements property will emit a `property-changed` event when\n   * their value is set. This flag informs the value accessor to ignore the\n   * next event while it is in the middle of writing a value.\n   */\n  private isWritingValue = false;\n  /**\n   * Flag that informs the value accessor that it is currently updating an\n   * element and should ignore additional `invalid` property changes until it is\n   * complete.\n   */\n  private ignoreInvalidChanges = false;\n  /**\n   * Indicates whether or not to use the value property or index property for a\n   * select or mulit-select element. When undefined, it indicates that the\n   * determination of which property to use has not occurred yet.\n   */\n  private useSelectableValueProp?: boolean;\n  /**\n   * Cached `control` value.\n   */\n  private _control: AbstractControl | undefined;\n\n  constructor(\n    public elementRef: ElementRef,\n    protected injector: Injector,\n    protected renderer: Renderer2,\n    @Optional()\n    @Inject(COMPOSITION_BUFFER_MODE)\n    compositionMode: boolean\n  ) {\n    super(renderer, elementRef, compositionMode);\n  }\n\n  /**\n   * Lifecycle callback that will connect an element's validatable properties\n   * (if they are implemented) to the Angular control.\n   */\n  ngAfterViewInit() {\n    const element = this.elementRef.nativeElement;\n    if (this.isValidatable(element)) {\n      // The control will always be set by ngAfterViewInit due to the nature of\n      // the directive's selectors\n      const control = this.control!;\n      // Allows Angular validators to update the custom element's validity\n      this.statusSub = control.statusChanges!.subscribe(() => {\n        if (typeof this.isInvalid === 'function') {\n          element.invalid = this.isInvalid(control);\n        } else {\n          element.invalid = !!control.invalid && !!control.dirty;\n        }\n      });\n\n      // Allows custom element validate function to update Angular control's\n      // validity\n      if (this.shouldUseValidate(element)) {\n        control.setValidators(\n          Validators.compose([\n            control.validator,\n            () => {\n              if (element.validate()) {\n                return null;\n              } else {\n                return { [this.validationErrorsKey]: true };\n              }\n            }\n          ])\n        );\n      }\n    }\n  }\n\n  /**\n   * Lifecycle callback to clean up subscriptions.\n   */\n  ngOnDestroy() {\n    if (this.statusSub) {\n      this.statusSub.unsubscribe();\n    }\n  }\n\n  /**\n   * Writes a value to a custom element's correct value property, based on what\n   * kind of element the directive controls.\n   *\n   * @param value the value to write\n   */\n  writeValue(value: any) {\n    this.isWritingValue = true;\n    const element = this.elementRef.nativeElement;\n    if (this.isMultiSelectable(element) || this.isSelectable(element)) {\n      const property = this.getSelectableProperty(element, value);\n      if (property) {\n        (<any>element)[property] = value;\n      }\n    } else if (this.isCheckedElement(element)) {\n      element.checked = Boolean(value);\n    } else {\n      super.writeValue(value);\n    }\n\n    this.isWritingValue = false;\n  }\n\n  /**\n   * Listen for custom element events and notify Angular of any changes.\n   *\n   * @param event the change event\n   */\n  @HostListener('selected-items-changed', ['$event'])\n  @HostListener('selected-item-changed', ['$event'])\n  @HostListener('selected-values-changed', ['$event'])\n  @HostListener('selected-changed', ['$event'])\n  @HostListener('checked-changed', ['$event'])\n  @HostListener('value-changed', ['$event'])\n  onChangedEvent(event: Event) {\n    if (!this.isWritingValue) {\n      const element = this.elementRef.nativeElement;\n      let changed = false;\n      switch (event.type) {\n        case 'selected-items-changed':\n        case 'selected-item-changed': {\n          const property = this.getSelectableProperty(element);\n          changed = property === 'selectedItems' || property === 'selectedItem';\n          break;\n        }\n        case 'selected-values-changed':\n        case 'selected-changed': {\n          const property = this.getSelectableProperty(element);\n          changed = property === 'selectedValues' || property === 'selected';\n          break;\n        }\n        default:\n          changed = true;\n      }\n\n      if (changed) {\n        let property: string;\n        if (this.isMultiSelectable(element) || this.isSelectable(element)) {\n          // property will be defined if we reach this since changed can only\n          // be true if the property is defined for selectable elements\n          property = this.getSelectableProperty(element)!;\n        } else if (this.isCheckedElement(element)) {\n          property = 'checked';\n        } else {\n          property = 'value';\n        }\n\n        // Don't use `event.detail.value`, since we cannot assume that all\n        // change events will provide that. Additionally, some event details\n        // may be splices of an array or object instead of the current value.\n        this.onChange(element[property]);\n      }\n    }\n  }\n\n  /**\n   * Listen for `invalid` property changes. Some elements, such as\n   * `<vaadin-date-picker>` have multiple \"values\". Setting the primary value\n   * (ex. the date string) may result in a temporarily invalid element until\n   * subsequent values (ex. the selected date) have been updated.\n   *\n   * Since this value accessor only listens for value changes, it may not be\n   * notified of the change in validity. This listener will listen for any\n   * explicity validity changes from the element and re-evaluate a control's\n   * validity if it and the element's validity are out of sync.\n   */\n  @HostListener('invalid-changed')\n  onInvalidChanged() {\n    if (!this.ignoreInvalidChanges) {\n      const element = this.elementRef.nativeElement;\n      if (\n        this.isValidatable(element) &&\n        this.control &&\n        this.control.invalid !== element.invalid\n      ) {\n        this.ignoreInvalidChanges = true;\n        this.control.updateValueAndValidity();\n        this.ignoreInvalidChanges = false;\n      }\n    }\n  }\n\n  /**\n   * Determines whether or not an element is checkbox-like.\n   *\n   * @param element the element to check\n   */\n  isCheckedElement(element: any): element is CheckedElementLike {\n    return this.isPropertyDefined(element, 'checked');\n  }\n\n  /**\n   * Determines whether or not an element is selectable-like.\n   *\n   * @param element the element to check\n   */\n  isSelectable(element: any): element is SelectableLike {\n    return (\n      this.isPropertyDefined(element, 'selected') ||\n      this.isPropertyDefined(element, 'selectedItem')\n    );\n  }\n\n  /**\n   * Determines whether or not an element is multi selectable-like.\n   *\n   * @param element the element to check\n   */\n  isMultiSelectable(element: any): element is MultiSelectableLike {\n    if (\n      element &&\n      (this.isPropertyDefined(element, 'selectedValues') ||\n        this.isPropertyDefined(element, 'selectedItems'))\n    ) {\n      return this.isSelectable(element) ? element.multi === true : true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Determines whether or not an element is validatable-like.\n   *\n   * @param element the element to check\n   */\n  isValidatable(element: any): element is ValidatableLike {\n    return this.isPropertyDefined(element, 'invalid');\n  }\n\n  shouldUseValidate(element: any): element is { validate(): boolean } {\n    if (typeof element.validate === 'function') {\n      // Some element's (such as `<vaadin-text-field>`) may not actually mutate\n      // the `invalid` property when `validate()` is called. In these\n      // situations, it's possible for Angular to set an element as invalid and\n      // never be able to recover since the element's `validate()` will always\n      // report it is invalid.\n      //\n      // In these situations, Origami should ignore the element's validate()\n      // function.\n      this.ignoreInvalidChanges = true;\n      const wasInvalid = element.invalid;\n      // If the element does mutate `invalid`, ask it to do so first to get a\n      // baseline.\n      element.validate();\n      // When `validate()` is called next, we will know if the element mutates\n      // `invalid` if the expected value matches `invalid` after changing\n      // `invalid` to something else.\n      const expected = element.invalid;\n      element.invalid = !element.invalid;\n      element.validate();\n      const validateMutatesInvalid = element.invalid === expected;\n      element.invalid = wasInvalid;\n      this.ignoreInvalidChanges = false;\n      return validateMutatesInvalid;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Determines whether or not a property is defined anywhere in the provided\n   * element's prototype chain.\n   *\n   * @param element the element to check\n   * @param property the property to check for\n   */\n  private isPropertyDefined(element: any, property: string): boolean {\n    return !!element && property in element;\n  }\n\n  /**\n   * Retrieves the property name of the selectable or multi-selectable element\n   * that should be updated. This method will use defined properties and the\n   * value type to determine which property should be used. If it cannot\n   * determine which property to use, it will return undefined.\n   *\n   * @param element the element to get the property for\n   * @param value a value for the element's property\n   * @returns the property name, or undefined if it cannot be determined\n   */\n  private getSelectableProperty(element: any, value?: any): string | undefined {\n    const isMulti = this.isMultiSelectable(element);\n    const valueProp = isMulti ? 'selectedItems' : 'selectedItem';\n    const indexProp = isMulti ? 'selectedValues' : 'selected';\n    if (typeof this.useSelectableValueProp !== 'boolean') {\n      // Determine whether we should be setting the index or value property for\n      // a selectable element\n      const hasValueProp = valueProp in element;\n      const hasIndexProp = indexProp in element;\n      if (hasValueProp && !hasIndexProp) {\n        this.useSelectableValueProp = true;\n      } else if (!hasValueProp && hasIndexProp) {\n        this.useSelectableValueProp = false;\n      } else if (typeof value !== 'undefined' && value !== null) {\n        const previousValue = element[valueProp];\n        // When the element has both properties, try to set it to the value\n        // property first. If it fails, then use the index property\n        try {\n          element[valueProp] = value;\n        } catch (error) {\n          // Could throw if the value is an unexpected type\n        }\n\n        // Check to see if the value we set it to is still accurate. If it's\n        // not then the element silently rejected the new value.\n        this.useSelectableValueProp = element[valueProp] === value;\n        element[valueProp] = previousValue;\n      } else {\n        return undefined;\n      }\n    }\n\n    if (element.itemValuePath) {\n      // <vaadin-combo-box> will want to use selectedItem for object values.\n      // However, if `itemValuePath` is set then the control value is not the\n      // item itself, but the `value` property.\n      return 'value';\n    } else {\n      return this.useSelectableValueProp ? valueProp : indexProp;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { OrigamiControlValueAccessor } from './value-accessor';\n\n/**\n * Provides support for template and reactive Angular form directives and\n * custom elements.\n */\n@NgModule({\n  declarations: [OrigamiControlValueAccessor],\n  exports: [OrigamiControlValueAccessor]\n})\nexport class OrigamiFormsModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":[],"mappings":"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"}