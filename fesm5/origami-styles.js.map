{"version":3,"file":"origami-styles.js","sources":["ng://ngx-origami/styles/src/modules/import-style-module.ts","ng://ngx-origami/styles/src/modules/include-styles.ts","ng://ngx-origami/styles/src/modules/style-to-emulated-encapsulation.ts","ng://ngx-origami/styles/src/modules/type-selectors.ts","ng://ngx-origami/styles/src/modules/inject-styles.ts","ng://ngx-origami/styles/src/modules/include-styles-no-router.module.ts","ng://ngx-origami/styles/src/modules/include-styles.module.ts","ng://ngx-origami/styles/src/shadycss/process-stylesheets.ts","ng://ngx-origami/styles/src/shadycss/shared-styles-host.ts","ng://ngx-origami/styles/src/shadycss/shadycss.module.ts","ng://ngx-origami/styles/origami-styles.ts"],"sourcesContent":["import { DomModule } from '@polymer/polymer/lib/elements/dom-module';\n\n/**\n * The <dom-module> constructor.\n */\nlet cachedDomModule: typeof DomModule;\n\n/**\n * Style module CSS text cached by id.\n */\nlet CACHED_STYLE_MODULES = new Map<string, string>();\n\n/**\n * Imports a `<dom-module id=\"name\">` style module by its id and returns the\n * `<style>` content for the module. Ensure that the module is imported and\n * added to the DOM before calling `importStyleModule()`.\n *\n * @deprecated Use stylesFromModule from\n *   `@polymer/polymer/lib/utils/style-gather`\n * @param styleModule the named id of the style module to import\n * @returns the style module's CSS text, or an empty string if the module does\n *   not exist\n */\nexport function importStyleModule(styleModule: string): string {\n  if (!CACHED_STYLE_MODULES.has(styleModule)) {\n    if (!cachedDomModule) {\n      cachedDomModule = customElements.get('dom-module');\n    }\n\n    const styleTemplate = <HTMLTemplateElement | undefined>(\n      cachedDomModule.import(styleModule, 'template')\n    );\n    if (styleTemplate) {\n      const styles = styleTemplate.content.querySelectorAll('style');\n      CACHED_STYLE_MODULES.set(\n        styleModule,\n        Array.from(styles)\n          .map(style => style.innerText)\n          .join('\\n')\n      );\n    } else {\n      CACHED_STYLE_MODULES.set(styleModule, '');\n    }\n  }\n\n  return CACHED_STYLE_MODULES.get(styleModule)!;\n}\n\n/**\n * Resets the cache using by `importStyleModule()`, primarily used for testing.\n *\n * @deprecated clearStyleModuleCache will be removed in the next major release\n */\nexport function clearStyleModuleCache() {\n  CACHED_STYLE_MODULES = new Map();\n}\n","import { Type } from '@angular/core';\n\n/**\n * Map of types to style modules.\n */\nlet TYPE_STYLE_MODULES = new Map<Type<any>, string[]>();\n\n/**\n * Decorator that registers style modules to be injected for a given component\n * type. One or more style modules may be specified.\n *\n * @param styleModule a style module to include\n * @param styleModules additional style modules to include\n * @returns a class decorator\n */\nexport function IncludeStyles(...styleModules: string[]): ClassDecorator {\n  return (target: any) => {\n    TYPE_STYLE_MODULES.set(target, styleModules);\n    return target;\n  };\n}\n\n/**\n * Retrieves all types that have been decorated with `@IncludeStyles()`.\n *\n * @returns an array of all decorated types\n */\nexport function getRegisteredTypes(): Array<Type<any>> {\n  return Array.from(TYPE_STYLE_MODULES.keys());\n}\n\n/**\n * Retrieves the style modules for a given type that was decorated with\n * `@IncludeStyles()`\n *\n * @param type the type to retrieve style modules for\n * @returns an array of style modules for the decorated type, or an empty\n *   array if the type was not decorated\n */\nexport function getStyleModulesFor(type?: Type<any>): string[] {\n  return (type && TYPE_STYLE_MODULES.get(type)) || [];\n}\n\n/**\n * Resets all types decorated with `@IncludeStyles()`. Should only be used for\n * testing.\n */\nexport function resetIncludeStyles() {\n  TYPE_STYLE_MODULES = new Map();\n}\n","/**\n * Regex to find and replace `:host-context()` selectors.\n */\nexport const HOST_CONTEXT_REGEX = /:host-context\\((.*)\\)/g;\n/**\n * Regex to find and replace `:host` selectors.\n */\nexport const HOST_REGEX = /:host(?:\\((.*)\\))?/g;\n\n// from @angular/platform-browser\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\n/**\n * Converts the provided CSS string to an Angular emulated encapsulation string\n * for the given component id.\n *\n * @param style the CSS string to convert\n * @returns a CSS string that emulates encapsulation for the given component id\n */\nexport function styleToEmulatedEncapsulation(style: string): string {\n  const statements = parseStyleStatements(style);\n  function addEmulation(statement: StyleStatement) {\n    if (Array.isArray(statement.statements)) {\n      statement.statements.forEach(nested => addEmulation(nested));\n    } else {\n      let { selector } = statement;\n      selector = selector.trim();\n      selector = selector\n        .split(',')\n        .map(subSelector => {\n          return subSelector\n            .trim()\n            .split(' ')\n            .map(part => {\n              part = part.trim();\n              if (part.includes(':host')) {\n                return part;\n              } else {\n                return `${part}[${CONTENT_ATTR}]`;\n              }\n            })\n            .join(' ');\n        })\n        .join(',');\n\n      selector = selector.replace(HOST_CONTEXT_REGEX, `*$1 [${HOST_ATTR}]`);\n      selector = selector.replace(HOST_REGEX, `[${HOST_ATTR}]$1`);\n      statement.selector = selector;\n    }\n  }\n\n  statements.forEach(statement => {\n    addEmulation(statement);\n  });\n\n  return statementsToString(statements);\n}\n\n/**\n * Represents a single CSS statement.\n */\nexport interface StyleStatement {\n  /**\n   * The selector of the statement.\n   */\n  selector: string;\n  /**\n   * The body block of the statement.\n   */\n  block: string;\n  /**\n   * The body block statements. This is used for at-rule selectors such as\n   * `@media {}`\n   */\n  statements?: StyleStatement[];\n}\n\n/**\n * Parses a CSS string into an array of statements.\n *\n * @param style the CSS string to parse\n * @returns an array of CSS statements\n */\nexport function parseStyleStatements(style: string): StyleStatement[] {\n  let inAtRule = false;\n  let inSingleQuote = false;\n  let inDoubleQuote = false;\n  let inBlock = 0;\n  let leavingBlock = false;\n\n  const statements: StyleStatement[] = [];\n  let currentStatement: StyleStatement = {\n    selector: '',\n    block: ''\n  };\n\n  for (let i = 0; i < style.length; i++) {\n    const char = style[i];\n    switch (char) {\n      case '@':\n        inAtRule = true;\n        break;\n      case \"'\":\n        inSingleQuote = !inSingleQuote;\n        break;\n      case '\"':\n        inDoubleQuote = !inDoubleQuote;\n        break;\n      case '{':\n      case '}':\n        if (!inSingleQuote && !inDoubleQuote) {\n          if (char == '{') {\n            inBlock++;\n          } else {\n            inBlock--;\n            leavingBlock = inBlock === 0;\n          }\n        }\n\n        break;\n    }\n\n    if (inBlock) {\n      currentStatement.block += char;\n    } else if (leavingBlock) {\n      currentStatement.block += char;\n      if (inAtRule) {\n        currentStatement.statements = parseStyleStatements(\n          currentStatement.block.substring(\n            currentStatement.block.indexOf('{') + 1,\n            currentStatement.block.lastIndexOf('}')\n          )\n        );\n      }\n\n      currentStatement.selector = currentStatement.selector.trim();\n      currentStatement.block = currentStatement.block.trim();\n      statements.push(currentStatement);\n      currentStatement = { selector: '', block: '' };\n      leavingBlock = false;\n    } else {\n      currentStatement.selector += char;\n    }\n  }\n\n  return statements;\n}\n\n/**\n * Converts an array of statements back into a single CSS string.\n *\n * @param statements the statements to convert\n * @returns a CSS string\n */\nexport function statementsToString(statements: StyleStatement[]): string {\n  return statements\n    .map(statement => {\n      const block = Array.isArray(statement.statements)\n        ? `{${statementsToString(statement.statements)}}`\n        : statement.block;\n      return `${statement.selector} ${block}`;\n    })\n    .join('\\n');\n}\n","import { ComponentFactoryResolver, Type } from '@angular/core';\nimport { getRegisteredTypes } from './include-styles';\n\nlet SELECTOR_TO_TYPE = new Map<string, Type<any>>();\nlet TYPE_TO_SELECTOR = new Map<Type<any>, string>();\n\n/**\n * Scans a `ComponentFactoryResolver` for types decorated with\n * `@IncludeStyles()` to build a map of types and selectors.\n *\n * @param resolver the `ComponentFactoryResolver` to scan\n */\nexport function scanComponentFactoryResolver(\n  resolver: ComponentFactoryResolver\n) {\n  Array.from(getRegisteredTypes()).forEach(type => {\n    if (!TYPE_TO_SELECTOR.has(type)) {\n      try {\n        const factory = resolver.resolveComponentFactory(type);\n        TYPE_TO_SELECTOR.set(type, factory.selector);\n        SELECTOR_TO_TYPE.set(factory.selector, type);\n      } catch (err) {\n        // No component factory found\n      }\n    }\n  });\n}\n\n/**\n * Retrieves the component type for a given selector string. The component must\n * have been decorated by `@IncludeStyles()` and scanned by\n * `scanComponentFactoryResolver()`.\n *\n * @param selector the selector of the component type\n * @returns the component type, or undefined if the type is not decorated or\n *   scanned\n */\nexport function getTypeFor(selector: string): Type<any> | undefined {\n  return SELECTOR_TO_TYPE.get(selector);\n}\n\n/**\n * Resets the type selector maps that were scanned by\n * `scanComponentFactoryResolver()`. This should only be used for testing.\n */\nexport function resetTypeSelectors() {\n  SELECTOR_TO_TYPE = new Map();\n  TYPE_TO_SELECTOR = new Map();\n}\n","import {\n  APP_INITIALIZER,\n  ComponentFactoryResolver,\n  NgModuleRef,\n  Provider,\n  RendererFactory2,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { stylesFromModule } from '@polymer/polymer/lib/utils/style-gather';\nimport { whenSet } from 'ngx-origami/util';\nimport { getStyleModulesFor } from './include-styles';\nimport { styleToEmulatedEncapsulation } from './style-to-emulated-encapsulation';\nimport { getTypeFor, scanComponentFactoryResolver } from './type-selectors';\n\n/**\n * Provider that ensures `injectIncludeStyles()` will run on application\n * startup before components are created.\n */\nexport const INJECT_STYLES_PROVIDER: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: injectIncludeStyles,\n  deps: [NgModuleRef]\n};\n\n/**\n * Provider that ensures `injectIncludeStyles()` will run on application\n * startup before components are created. This provider does _not_ require\n * @angular/router.\n */\nexport const INJECT_STYLES_NO_ROUTER_PROVIDER: Provider = {\n  provide: APP_INITIALIZER,\n  multi: true,\n  useFactory: injectIncludeStylesNoRouter,\n  deps: [NgModuleRef]\n};\n\n/**\n * Returns a callback that, when invoked, will use the provided `NgModuleRef`\n * to patch the renderer factory and scan the component factory resolver in\n * order to enable injecting Polymer style modules for components decorated with\n * `@IncludeStyles()`.\n *\n * This function will additionally listen to any lazy-loaded modules from\n * Angular's router and scan component factory resolvers that are added after\n * the app has initialized.\n *\n * @param ngModule the root `NgModule` reference\n * @returns a callback that will begin the injection process\n */\nexport function injectIncludeStyles(ngModule: NgModuleRef<any>): () => void {\n  const injectStyles = injectIncludeStylesNoRouter(ngModule);\n  return () => {\n    injectStyles();\n    const router = <Router>ngModule.injector.get(Router);\n    router.events.subscribe(e => {\n      if ('route' in e && !(<any>e.route)._loadedConfig) {\n        whenSet(<any>e.route, '_loadedConfig', undefined, config => {\n          scanComponentFactoryResolver(\n            config.module.injector.get(ComponentFactoryResolver)\n          );\n        });\n      }\n    });\n  };\n}\n\n/**\n * Returns a callback that, when invoked, will use the provided `NgModuleRef`\n * to patch the renderer factory and scan the component factory resolver in\n * order to enable injecting Polymer style modules for components decorated with\n * `@IncludeStyles()`.\n *\n * @param ngModule the root `NgModule` reference\n * @returns a callback that will begin the injection process\n */\nexport function injectIncludeStylesNoRouter(\n  ngModule: NgModuleRef<any>\n): () => void {\n  return () => {\n    patchRendererFactory(ngModule.injector.get(RendererFactory2));\n    scanComponentFactoryResolver(\n      ngModule.injector.get(ComponentFactoryResolver)\n    );\n  };\n}\n\nconst INJECTED_SELECTORS: string[] = [];\n\n/**\n * Patches a `RendererFactory2` to overwrite `createRenderer()` and add styles\n * imported from Polymer style modules according to `@IncludeStyles()`\n * decorators to the `RendererType2` data for the element.\n *\n * If the element type using emulated view encapsulation, the styles imported\n * will be converted to preserve encapsulation.\n *\n * @param factory the renderer factory to patch\n */\nexport function patchRendererFactory(factory: RendererFactory2) {\n  const $createRenderer = factory.createRenderer;\n  factory.createRenderer = function(element, type) {\n    const selector = element && element.localName;\n    if (selector && type && INJECTED_SELECTORS.indexOf(selector) === -1) {\n      const styleModules = getStyleModulesFor(getTypeFor(selector));\n      let styles = styleModules.map(styleModule => {\n        const styleElements = stylesFromModule(styleModule);\n        return styleElements.map(e => e.innerText).join('\\n');\n      });\n      switch (type.encapsulation) {\n        case ViewEncapsulation.Emulated:\n        default:\n          styles = styles.map(style => styleToEmulatedEncapsulation(style));\n          break;\n        case ViewEncapsulation.None:\n        case ViewEncapsulation.Native:\n        case ViewEncapsulation.ShadowDom:\n          break;\n      }\n\n      type.styles.push(...styles);\n      INJECTED_SELECTORS.push(selector);\n    }\n\n    return $createRenderer.apply(this, <any>arguments);\n  };\n}\n","import { NgModule } from '@angular/core';\nimport { INJECT_STYLES_NO_ROUTER_PROVIDER } from './inject-styles';\n\n/**\n * Importing this module will add the ability for Angular components to include\n * Polymer style modules with the `@IncludeStyles()` decorator. This module\n * only needs to be imported once at the root component.\n *\n * This module does _not_ require `@angular/router` and will not inject styles\n * into lazy loaded components.\n */\n@NgModule({\n  providers: [INJECT_STYLES_NO_ROUTER_PROVIDER]\n})\nexport class IncludeStylesNoRouterModule {}\n","import { NgModule } from '@angular/core';\nimport { INJECT_STYLES_PROVIDER } from './inject-styles';\n\n/**\n * Importing this module will add the ability for Angular components to include\n * Polymer style modules with the `@IncludeStyles()` decorator. This module\n * only needs to be imported once at the root component.\n *\n * This module _requires_` @angular/router` in order to inject styles for lazy\n * loaded components. Use `InjectStylesNoRouterModule` if your application does\n * not use `@angular/router`.\n */\n@NgModule({\n  providers: [INJECT_STYLES_PROVIDER]\n})\nexport class IncludeStylesModule {}\n","import { InjectionToken } from '@angular/core';\n\n/**\n * By default, Origami will not parse or register styles with ShadyCSS if the\n * platform supports native CSS custom properties. However, ShadyCSS also\n * supports the deprecated `@apply` mixin proposal. If a project is using\n * `@apply` in CSS, this token should be provided with a true value.\n */\nexport const USING_APPLY = new InjectionToken<boolean>('usingApply');\n\n/**\n * Processes all current document stylesheets added by Angular and registers\n * them with ShadyCSS.\n *\n * This function will also parse external `<link>` stylesheets if native\n * CSS custom properties are not supported, or if `usingApply` is set to true.\n *\n * @param usingApply if true, parse stylesheets regardless of native support,\n *   since no browser supports `@apply` natively\n * @returns a Promise when all stylesheets have been processed\n */\nexport async function processStylesheets(usingApply?: boolean): Promise<void> {\n  const CustomStyleInterface =\n    window.ShadyCSS && window.ShadyCSS.CustomStyleInterface;\n  if (CustomStyleInterface && (!window.ShadyCSS.nativeCss || usingApply)) {\n    await Promise.all(\n      Array.from(document.styleSheets).map(stylesheet => {\n        const node = stylesheet.ownerNode;\n        if (isStyleNode(node) && !node.hasAttribute('scope')) {\n          CustomStyleInterface.addCustomStyle(node);\n          return Promise.resolve();\n        } else if (stylesheet.href) {\n          if (!(<any>stylesheet)._fetching) {\n            const href = stylesheet.href;\n            (<any>stylesheet)._fetching = new Promise<void>(resolve => {\n              const xhr = new XMLHttpRequest();\n              xhr.addEventListener('load', () => {\n                const style = document.createElement('style');\n                style.innerHTML = xhr.responseText;\n                node.parentNode!.insertBefore(style, node);\n                node.parentNode!.removeChild(node);\n                CustomStyleInterface.addCustomStyle(style);\n                resolve();\n              });\n\n              xhr.open('GET', href);\n              xhr.send();\n            });\n          }\n\n          return (<any>stylesheet)._fetching;\n        }\n      })\n    );\n  }\n}\n\n/**\n * Returns true if the provided node is a `<style>` node.\n *\n * @param node the node to test\n * @returns true if the node is a `<style>` node\n */\nexport function isStyleNode(node: Node): node is HTMLStyleElement {\n  return (<HTMLStyleElement>node).localName === 'style';\n}\n","import { Inject, Optional, Provider } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ɵDomSharedStylesHost as DomSharedStylesHost } from '@angular/platform-browser';\nimport { USING_APPLY, processStylesheets } from './process-stylesheets';\n\n// First group is incorrect escape backslash, second group is rest of mixin detection\nconst MIXIN_REGEX = /(?:\\\\)(--\\w[\\w-_]*:\\s*{[^}]*})(;)?/g;\n\n/**\n * A `SharedStylesHost` that extends the default `DomSharedStylesHost` and will\n * pass styles to ShadyCSS for processing. This will allow the use of custom CSS\n * properties in Angular styles on browsers that do not support them.\n */\nexport class ShadyCSSSharedStylesHost extends DomSharedStylesHost {\n  constructor(\n    @Inject(DOCUMENT) document: Document,\n    @Optional()\n    @Inject(USING_APPLY)\n    private usingApply?: boolean\n  ) {\n    /* istanbul ignore next */\n    super(document);\n  }\n\n  addStyles(styles: string[]) {\n    /**\n     * Mixins are declared as\n     *\n     * html {\n     *   --my-mixin: {\n     *     color: blue;\n     *   }\n     * }\n     *\n     * But are incorrectly interpolated by the webpack CSS loader as\n     *\n     * html {\n     *   \\--my-mixin: {\n     *     color: blue;\n     *   }\n     * }\n     *\n     * This regex will fix the added backslash.\n     */\n    super.addStyles(styles.map(style => style.replace(MIXIN_REGEX, '$1')));\n  }\n\n  onStylesAdded(additions: Set<string>) {\n    super.onStylesAdded(additions);\n    processStylesheets(this.usingApply);\n  }\n}\n/**\n * Factory that creates a new ShadyCSSSharedStylesHost.\n */\nexport function ShadyCSSSharedStylesHostFactory() {\n  return new ShadyCSSSharedStylesHost(document);\n}\n/**\n * Provider that replaces the DomSharedStylesHost with ShadyCSSSharedStylesHost.\n */\nexport const SHADYCSS_SHARED_STYLES_HOST_PROVIDER: Provider = {\n  provide: DomSharedStylesHost,\n  useFactory: ShadyCSSSharedStylesHostFactory\n};\n","import { ModuleWithProviders, NgModule } from '@angular/core';\nimport { WebComponentsReadyModule } from 'ngx-origami/polyfills';\nimport { USING_APPLY } from './process-stylesheets';\nimport { SHADYCSS_SHARED_STYLES_HOST_PROVIDER } from './shared-styles-host';\n\n/**\n * Adds ShadyCSS support to Angular. This allows the use of CSS custom\n * properties in Angular styles on browsers that do not support them.\n *\n * The ShadyCSS polyfill must be imported separately. It may be imported from\n * `@webcomponents/shadycss/entrypoints/custom-style-interface.js`\n * or `@polymer/polymer/lib/elements/custom-style.js`.\n *\n * If using the deprecated `@apply` mixin proposal, import\n * `ShadyCSSModule.usingApply()` instead.\n */\n@NgModule({\n  imports: [WebComponentsReadyModule],\n  providers: [SHADYCSS_SHARED_STYLES_HOST_PROVIDER]\n})\nexport class ShadyCSSModule {\n  /**\n   * Forces Origami to register all stylesheets with ShadyCSS regardless of\n   * native CSS custom property support. Import `ShadyCSSModule.usingApply()`\n   * when using `@apply` mixins.\n   */\n  static usingApply(): ModuleWithProviders {\n    return {\n      ngModule: ShadyCSSModule,\n      providers: [\n        {\n          provide: USING_APPLY,\n          useValue: true\n        }\n      ]\n    };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["DomSharedStylesHost"],"mappings":";;;;;;;;;AAEA;;;AAGA,IAAI,eAAiC,CAAC;AAEtC;;;AAGA,IAAI,oBAAoB,GAAG,IAAI,GAAG,EAAkB,CAAC;AAErD;;;;;;;;;;;SAWgB,iBAAiB,CAAC,WAAmB;IACnD,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE;QAC1C,IAAI,CAAC,eAAe,EAAE;YACpB,eAAe,GAAG,cAAc,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;SACpD;QAED,IAAM,aAAa,IACjB,eAAe,CAAC,MAAM,CAAC,WAAW,EAAE,UAAU,CAAC,CAChD,CAAC;QACF,IAAI,aAAa,EAAE;YACjB,IAAM,MAAM,GAAG,aAAa,CAAC,OAAO,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;YAC/D,oBAAoB,CAAC,GAAG,CACtB,WAAW,EACX,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;iBACf,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,SAAS,GAAA,CAAC;iBAC7B,IAAI,CAAC,IAAI,CAAC,CACd,CAAC;SACH;aAAM;YACL,oBAAoB,CAAC,GAAG,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;SAC3C;KACF;IAED,OAAO,oBAAoB,CAAC,GAAG,CAAC,WAAW,CAAE,CAAC;AAChD,CAAC;AAED;;;;;SAKgB,qBAAqB;IACnC,oBAAoB,GAAG,IAAI,GAAG,EAAE,CAAC;AACnC;;ACrDA;;;AAGA,IAAI,kBAAkB,GAAG,IAAI,GAAG,EAAuB,CAAC;AAExD;;;;;;;;SAQgB,aAAa;IAAC,sBAAyB;SAAzB,UAAyB,EAAzB,qBAAyB,EAAzB,IAAyB;QAAzB,iCAAyB;;IACrD,OAAO,UAAC,MAAW;QACjB,kBAAkB,CAAC,GAAG,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;QAC7C,OAAO,MAAM,CAAC;KACf,CAAC;AACJ,CAAC;AAED;;;;;SAKgB,kBAAkB;IAChC,OAAO,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC,CAAC;AAC/C,CAAC;AAED;;;;;;;;SAQgB,kBAAkB,CAAC,IAAgB;IACjD,OAAO,CAAC,IAAI,IAAI,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;AACtD,CAAC;AAED;;;;SAIgB,kBAAkB;IAChC,kBAAkB,GAAG,IAAI,GAAG,EAAE,CAAC;AACjC;;ACjDA;;;IAGa,kBAAkB,GAAG,yBAAyB;AAC3D;;;IAGa,UAAU,GAAG,sBAAsB;AAEhD;IACa,kBAAkB,GAAG,SAAS;IAC9B,SAAS,GAAG,aAAW,mBAAqB;IAC5C,YAAY,GAAG,gBAAc,mBAAqB;AAE/D;;;;;;;SAOgB,4BAA4B,CAAC,KAAa;IACxD,IAAM,UAAU,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;IAC/C,SAAS,YAAY,CAAC,SAAyB;QAC7C,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE;YACvC,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,MAAM,IAAI,OAAA,YAAY,CAAC,MAAM,CAAC,GAAA,CAAC,CAAC;SAC9D;aAAM;YACC,IAAA,6BAAQ,CAAe;YAC7B,QAAQ,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC3B,QAAQ,GAAG,QAAQ;iBAChB,KAAK,CAAC,GAAG,CAAC;iBACV,GAAG,CAAC,UAAA,WAAW;gBACd,OAAO,WAAW;qBACf,IAAI,EAAE;qBACN,KAAK,CAAC,GAAG,CAAC;qBACV,GAAG,CAAC,UAAA,IAAI;oBACP,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;oBACnB,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;wBAC1B,OAAO,IAAI,CAAC;qBACb;yBAAM;wBACL,OAAU,IAAI,SAAI,YAAY,MAAG,CAAC;qBACnC;iBACF,CAAC;qBACD,IAAI,CAAC,GAAG,CAAC,CAAC;aACd,CAAC;iBACD,IAAI,CAAC,GAAG,CAAC,CAAC;YAEb,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,kBAAkB,EAAE,UAAQ,SAAS,MAAG,CAAC,CAAC;YACtE,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,UAAU,EAAE,MAAI,SAAS,QAAK,CAAC,CAAC;YAC5D,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC/B;KACF;IAED,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS;QAC1B,YAAY,CAAC,SAAS,CAAC,CAAC;KACzB,CAAC,CAAC;IAEH,OAAO,kBAAkB,CAAC,UAAU,CAAC,CAAC;AACxC,CAAC;AAqBD;;;;;;SAMgB,oBAAoB,CAAC,KAAa;IAChD,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrB,IAAI,aAAa,GAAG,KAAK,CAAC;IAC1B,IAAI,aAAa,GAAG,KAAK,CAAC;IAC1B,IAAI,OAAO,GAAG,CAAC,CAAC;IAChB,IAAI,YAAY,GAAG,KAAK,CAAC;IAEzB,IAAM,UAAU,GAAqB,EAAE,CAAC;IACxC,IAAI,gBAAgB,GAAmB;QACrC,QAAQ,EAAE,EAAE;QACZ,KAAK,EAAE,EAAE;KACV,CAAC;IAEF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,IAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,QAAQ,IAAI;YACV,KAAK,GAAG;gBACN,QAAQ,GAAG,IAAI,CAAC;gBAChB,MAAM;YACR,KAAK,GAAG;gBACN,aAAa,GAAG,CAAC,aAAa,CAAC;gBAC/B,MAAM;YACR,KAAK,GAAG;gBACN,aAAa,GAAG,CAAC,aAAa,CAAC;gBAC/B,MAAM;YACR,KAAK,GAAG,CAAC;YACT,KAAK,GAAG;gBACN,IAAI,CAAC,aAAa,IAAI,CAAC,aAAa,EAAE;oBACpC,IAAI,IAAI,IAAI,GAAG,EAAE;wBACf,OAAO,EAAE,CAAC;qBACX;yBAAM;wBACL,OAAO,EAAE,CAAC;wBACV,YAAY,GAAG,OAAO,KAAK,CAAC,CAAC;qBAC9B;iBACF;gBAED,MAAM;SACT;QAED,IAAI,OAAO,EAAE;YACX,gBAAgB,CAAC,KAAK,IAAI,IAAI,CAAC;SAChC;aAAM,IAAI,YAAY,EAAE;YACvB,gBAAgB,CAAC,KAAK,IAAI,IAAI,CAAC;YAC/B,IAAI,QAAQ,EAAE;gBACZ,gBAAgB,CAAC,UAAU,GAAG,oBAAoB,CAChD,gBAAgB,CAAC,KAAK,CAAC,SAAS,CAC9B,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EACvC,gBAAgB,CAAC,KAAK,CAAC,WAAW,CAAC,GAAG,CAAC,CACxC,CACF,CAAC;aACH;YAED,gBAAgB,CAAC,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC7D,gBAAgB,CAAC,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;YACvD,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;YAClC,gBAAgB,GAAG,EAAE,QAAQ,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;YAC/C,YAAY,GAAG,KAAK,CAAC;SACtB;aAAM;YACL,gBAAgB,CAAC,QAAQ,IAAI,IAAI,CAAC;SACnC;KACF;IAED,OAAO,UAAU,CAAC;AACpB,CAAC;AAED;;;;;;SAMgB,kBAAkB,CAAC,UAA4B;IAC7D,OAAO,UAAU;SACd,GAAG,CAAC,UAAA,SAAS;QACZ,IAAM,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,UAAU,CAAC;cAC7C,MAAI,kBAAkB,CAAC,SAAS,CAAC,UAAU,CAAC,MAAG;cAC/C,SAAS,CAAC,KAAK,CAAC;QACpB,OAAU,SAAS,CAAC,QAAQ,SAAI,KAAO,CAAC;KACzC,CAAC;SACD,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB;;AClKA,IAAI,gBAAgB,GAAG,IAAI,GAAG,EAAqB,CAAC;AACpD,IAAI,gBAAgB,GAAG,IAAI,GAAG,EAAqB,CAAC;AAEpD;;;;;;SAMgB,4BAA4B,CAC1C,QAAkC;IAElC,KAAK,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,OAAO,CAAC,UAAA,IAAI;QAC3C,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;YAC/B,IAAI;gBACF,IAAM,OAAO,GAAG,QAAQ,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;gBACvD,gBAAgB,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAC7C,gBAAgB,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;aAC9C;YAAC,OAAO,GAAG,EAAE;;aAEb;SACF;KACF,CAAC,CAAC;AACL,CAAC;AAED;;;;;;;;;SASgB,UAAU,CAAC,QAAgB;IACzC,OAAO,gBAAgB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACxC,CAAC;AAED;;;;SAIgB,kBAAkB;IAChC,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;IAC7B,gBAAgB,GAAG,IAAI,GAAG,EAAE,CAAC;AAC/B;;ACjCA;;;;IAIa,sBAAsB,GAAa;IAC9C,OAAO,EAAE,eAAe;IACxB,KAAK,EAAE,IAAI;IACX,UAAU,EAAE,mBAAmB;IAC/B,IAAI,EAAE,CAAC,WAAW,CAAC;EACnB;AAEF;;;;;IAKa,gCAAgC,GAAa;IACxD,OAAO,EAAE,eAAe;IACxB,KAAK,EAAE,IAAI;IACX,UAAU,EAAE,2BAA2B;IACvC,IAAI,EAAE,CAAC,WAAW,CAAC;EACnB;AAEF;;;;;;;;;;;;;SAagB,mBAAmB,CAAC,QAA0B;IAC5D,IAAM,YAAY,GAAG,2BAA2B,CAAC,QAAQ,CAAC,CAAC;IAC3D,OAAO;QACL,YAAY,EAAE,CAAC;QACf,IAAM,MAAM,GAAW,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACrD,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,UAAA,CAAC;YACvB,IAAI,OAAO,IAAI,CAAC,IAAI,CAAO,CAAC,CAAC,KAAM,CAAC,aAAa,EAAE;gBACjD,OAAO,CAAM,CAAC,CAAC,KAAK,EAAE,eAAe,EAAE,SAAS,EAAE,UAAA,MAAM;oBACtD,4BAA4B,CAC1B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,CACrD,CAAC;iBACH,CAAC,CAAC;aACJ;SACF,CAAC,CAAC;KACJ,CAAC;AACJ,CAAC;AAED;;;;;;;;;SASgB,2BAA2B,CACzC,QAA0B;IAE1B,OAAO;QACL,oBAAoB,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAC9D,4BAA4B,CAC1B,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAChD,CAAC;KACH,CAAC;AACJ,CAAC;AAED,IAAM,kBAAkB,GAAa,EAAE,CAAC;AAExC;;;;;;;;;;SAUgB,oBAAoB,CAAC,OAAyB;IAC5D,IAAM,eAAe,GAAG,OAAO,CAAC,cAAc,CAAC;IAC/C,OAAO,CAAC,cAAc,GAAG,UAAS,OAAO,EAAE,IAAI;;QAC7C,IAAM,QAAQ,GAAG,OAAO,IAAI,OAAO,CAAC,SAAS,CAAC;QAC9C,IAAI,QAAQ,IAAI,IAAI,IAAI,kBAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;YACnE,IAAM,YAAY,GAAG,kBAAkB,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC9D,IAAI,MAAM,GAAG,YAAY,CAAC,GAAG,CAAC,UAAA,WAAW;gBACvC,IAAM,aAAa,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;gBACpD,OAAO,aAAa,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,SAAS,GAAA,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACvD,CAAC,CAAC;YACH,QAAQ,IAAI,CAAC,aAAa;gBACxB,KAAK,iBAAiB,CAAC,QAAQ,CAAC;gBAChC;oBACE,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,4BAA4B,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;oBAClE,MAAM;gBACR,KAAK,iBAAiB,CAAC,IAAI,CAAC;gBAC5B,KAAK,iBAAiB,CAAC,MAAM,CAAC;gBAC9B,KAAK,iBAAiB,CAAC,SAAS;oBAC9B,MAAM;aACT;YAED,CAAA,KAAA,IAAI,CAAC,MAAM,EAAC,IAAI,oBAAI,MAAM,GAAE;YAC5B,kBAAkB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SACnC;QAED,OAAO,eAAe,CAAC,KAAK,CAAC,IAAI,EAAO,SAAS,CAAC,CAAC;KACpD,CAAC;AACJ;;AC5HA;;;;;;;;;IAWA;KAA2C;IAA9B,2BAA2B;QAHvC,QAAQ,CAAC;YACR,SAAS,EAAE,CAAC,gCAAgC,CAAC;SAC9C,CAAC;OACW,2BAA2B,CAAG;IAAD,kCAAC;CAA3C;;ACXA;;;;;;;;;;IAYA;KAAmC;IAAtB,mBAAmB;QAH/B,QAAQ,CAAC;YACR,SAAS,EAAE,CAAC,sBAAsB,CAAC;SACpC,CAAC;OACW,mBAAmB,CAAG;IAAD,0BAAC;CAAnC;;ACbA;;;;;;IAMa,WAAW,GAAG,IAAI,cAAc,CAAU,YAAY,EAAE;AAErE;;;;;;;;;;;SAWsB,kBAAkB,CAAC,UAAoB;;;;;;oBACrD,oBAAoB,GACxB,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,oBAAoB,CAAC;0BACtD,oBAAoB,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,IAAI,UAAU,CAAC,CAAA,EAAlE,wBAAkE;oBACpE,qBAAM,OAAO,CAAC,GAAG,CACf,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,UAAA,UAAU;4BAC7C,IAAM,IAAI,GAAG,UAAU,CAAC,SAAS,CAAC;4BAClC,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,EAAE;gCACpD,oBAAoB,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;gCAC1C,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;6BAC1B;iCAAM,IAAI,UAAU,CAAC,IAAI,EAAE;gCAC1B,IAAI,CAAO,UAAW,CAAC,SAAS,EAAE;oCAChC,IAAM,MAAI,GAAG,UAAU,CAAC,IAAI,CAAC;oCACvB,UAAW,CAAC,SAAS,GAAG,IAAI,OAAO,CAAO,UAAA,OAAO;wCACrD,IAAM,GAAG,GAAG,IAAI,cAAc,EAAE,CAAC;wCACjC,GAAG,CAAC,gBAAgB,CAAC,MAAM,EAAE;4CAC3B,IAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;4CAC9C,KAAK,CAAC,SAAS,GAAG,GAAG,CAAC,YAAY,CAAC;4CACnC,IAAI,CAAC,UAAW,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;4CAC3C,IAAI,CAAC,UAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;4CACnC,oBAAoB,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;4CAC3C,OAAO,EAAE,CAAC;yCACX,CAAC,CAAC;wCAEH,GAAG,CAAC,IAAI,CAAC,KAAK,EAAE,MAAI,CAAC,CAAC;wCACtB,GAAG,CAAC,IAAI,EAAE,CAAC;qCACZ,CAAC,CAAC;iCACJ;gCAED,OAAa,UAAW,CAAC,SAAS,CAAC;6BACpC;yBACF,CAAC,CACH,EAAA;;oBA5BD,SA4BC,CAAC;;;;;;CAEL;AAED;;;;;;SAMgB,WAAW,CAAC,IAAU;IACpC,OAA0B,IAAK,CAAC,SAAS,KAAK,OAAO,CAAC;AACxD;;AC5DA;AACA,IAAM,WAAW,GAAG,qCAAqC,CAAC;AAE1D;;;;;;IAK8C,4CAAmB;IAC/D,kCACoB,QAAkB,EAG5B,UAAoB;QAJ9B;;QAOE,kBAAM,QAAQ,CAAC,SAChB;QAJS,gBAAU,GAAV,UAAU,CAAU;;KAI7B;IAED,4CAAS,GAAT,UAAU,MAAgB;;;;;;;;;;;;;;;;;;;;QAoBxB,iBAAM,SAAS,YAAC,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,GAAA,CAAC,CAAC,CAAC;KACxE;IAED,gDAAa,GAAb,UAAc,SAAsB;QAClC,iBAAM,aAAa,YAAC,SAAS,CAAC,CAAC;QAC/B,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACrC;IArCU,wBAAwB;QAEhC,WAAA,MAAM,CAAC,QAAQ,CAAC,CAAA;QAChB,WAAA,QAAQ,EAAE,CAAA;QACV,WAAA,MAAM,CAAC,WAAW,CAAC,CAAA;OAJX,wBAAwB,CAsCpC;IAAD,+BAAC;CAAA,CAtC6CA,oBAAmB,GAsChE;AACD;;;SAGgB,+BAA+B;IAC7C,OAAO,IAAI,wBAAwB,CAAC,QAAQ,CAAC,CAAC;AAChD,CAAC;AACD;;;IAGa,oCAAoC,GAAa;IAC5D,OAAO,EAAEA,oBAAmB;IAC5B,UAAU,EAAE,+BAA+B;;;AC1D7C;;;;;;;;;;;;IAeA;KAiBC;uBAjBY,cAAc;;;;;;IAMlB,yBAAU,GAAjB;QACE,OAAO;YACL,QAAQ,EAAE,gBAAc;YACxB,SAAS,EAAE;gBACT;oBACE,OAAO,EAAE,WAAW;oBACpB,QAAQ,EAAE,IAAI;iBACf;aACF;SACF,CAAC;KACH;;IAhBU,cAAc;QAJ1B,QAAQ,CAAC;YACR,OAAO,EAAE,CAAC,wBAAwB,CAAC;YACnC,SAAS,EAAE,CAAC,oCAAoC,CAAC;SAClD,CAAC;OACW,cAAc,CAiB1B;IAAD,qBAAC;CAjBD;;ACpBA;;;;;;"}